<div id="disable-body-modal"></div>
<nav class="navbar navbar-dark navbar-expand-md">
	<a id="nav-home" class="navbar-brand" href="/dashboard">
		<img src="/assets/favicon.svg">
		&nbsp;
		&nbsp;
		<p>DotKeeper</p>
	</a>
	<button class="navbar-toggler" data-bs-toggle="collapse" data-bs-target="#navbar">
		<span class="navbar-toggler-icon"></span>
	</button>
	<div class="navbar-collapse collapse" id="navbar">
		<ul class="navbar-nav">
			<li class="nav-item"><a href="#" class="nav-link active-op disabled">Overview</a></li>
			<li class="nav-item"><a href="/project/access/{{this.projectId}}" class="nav-link">Access</a></li>
			<li class="nav-item"><a href="/project/settings/{{this.projectId}}" class="nav-link">Settings</a></li>
		</ul>
	</div>
</nav>
<div class="main">
	<div class="container main-container">
		{{!-- Add Row --}}
		<div class="row project-info">
			<div class="col-sm-3">
				<p class="section-heading">Project Information</p>
			</div>
			<div class="col-sm-9">
				<div class="row">
					<div class="col-sm-4">Project Name</div>
					<div class="col-sm-8">{{projectName}}</div>
				</div>
				<div class="row">
					<div class="col-sm-4">Project ID</div>
					<div class="col-sm-8">{{projectId}}</div>
				</div>
				<div class="row">
					<div class="col-sm-4">GitHub Repo</div>
					<div class="col-sm-8">
						<i class="fab fa-github"></i>
						&nbsp;
						{{#if github}}
						{{github}}
						{{else}}
						(Empty)
						{{/if}}
					</div>
				</div>
				<div class="row">
					<div class="col-sm-4">Website</div>
					<div class="col-sm-8">
						<i class="fas fa-globe-americas"></i>
						&nbsp;
						{{#if website}}
						{{website}}
						{{else}}
						(Empty)
						{{/if}}
					</div>
				</div>
				<div class="row">
					<div class="col-sm-4">Permission</div>
					<div class="col-sm-8 permission-overview">
						{{!-- Owner Permission --}}
						{{#ifEqual 'owner' permission}}
						<img class="owner permission-enabled" src="/assets/owner.png">
						&nbsp;
						<p>Owner</p>
						{{!-- Editor Permission --}}
						{{else ifEqual 'editor' permission}}
						<img class="editor permission-enabled" src="/assets/editor.png">
						&nbsp;
						<p>Editor</p>
						{{!-- Viewer Permission --}}
						{{else}}
						<img class="viewer permission-enabled" src="/assets/viewer.png">
						&nbsp;
						<p>Viewer</p>
						{{/ifEqual}}
					</div>
				</div>
			</div>
		</div>
		<br>
		<hr>
		<br>
		<div class="row config-vars">
			<div class="col-sm-3">
				<p class="section-heading">Config Vars</p>
			</div>
			<div class="col-sm-9">
				<div class="row env-font-div">
					<div class="col-sm-2">
						<button id="export-file-btn" onclick="openExportModal()">
							<div id="export-file" class="center">
								Export file
							</div>
							<div id="exporting-file">
								<i class="fas fa-circle-notch fa-spin"></i>
							</div>
						</button>
					</div>
					<div class="col-sm-2">
						<button id="import-file-btn" onclick="importFile()">
							<div id="import-file" class="center">
								Import file
							</div>
							<div id="importing-file">
								<i class="fas fa-circle-notch fa-spin"></i>
							</div>
						</button>
					</div>
					<div>
						<hr>
					</div>
				</div>
				{{!-- Add row for owner --}}
				{{#ifEqual 'owner' permission}}
				<div class="row add-row env-font-div">
					<div class="col-sm-5">
						<input type="text" id="add-key" class="form-control key" placeholder="KEY" aria-label="KEY">
					</div>
					<div class="col-sm-5">
						<input type="text" id="add-value" class="form-control value" placeholder="VALUE" aria-label="VALUE">
					</div>
					<div class="col-sm-2">
						<div class="env-options">
							<button id="add-env-btn">
								<div id="add-env" class="center">
									Add
								</div>
								<div id="saving-env">
									<i class="fas fa-circle-notch fa-spin"></i>
								</div>
							</button>
						</div>
					</div>
					<div id="key-error">Required</div>
				</div>
				{{!-- Add row for editor --}}
				{{else ifEqual 'editor' permission}}
				<div class="row add-row env-font-div">
					<div class="col-sm-5">
						<input type="text" id="add-key" class="form-control key" placeholder="KEY" aria-label="KEY">
					</div>
					<div class="col-sm-5">
						<input type="text" id="add-value" class="form-control value" placeholder="VALUE" aria-label="VALUE">
					</div>
					<div class="col-sm-2">
						<div class="env-options">
							<button id="add-env-btn">
								<div id="add-env">
									Add
								</div>
								<div id="saving-env">
									<i class="fas fa-circle-notch fa-spin"></i>
								</div>
							</button>
						</div>
					</div>
					<div id="key-error">Required</div>
				</div>
				{{!-- Add row for viewer --}}
				{{else}}
				<abbr title="Only for Owner and Editor">
					<div class="row add-row env-font-div">
						<div class="col-sm-5">
							<input type="text" id="add-key" class="form-control key" placeholder="KEY" aria-label="KEY" disabled>
						</div>
						<div class="col-sm-5">
							<input type="text" id="add-value" class="form-control value" placeholder="VALUE" aria-label="VALUE"
								disabled>
						</div>
						<div class="col-sm-2">
							<div class="env-options">
								<button id="add-env-btn" class="disabled-btn" disabled>
									<div id="add-env" class="center">
										Add
									</div>
									<div id="saving-env">
										<i class="fas fa-circle-notch fa-spin"></i>
									</div>
								</button>
							</div>
						</div>
						<div id="key-error">Required</div>
					</div>
				</abbr>
				{{/ifEqual}}
				{{#each variables}}
				<div class="row env-font-div">
					<div>
						<hr>
					</div>
					<div class="col-sm-5">
						<input type="text" class="form-control key" placeholder="KEY" aria-label="KEY" disabled
							value="{{this.key}}">
					</div>
					<div class="col-sm-5">
						<input type="text" class="form-control value" placeholder="VALUE" aria-label="VALUE" disabled
							value="{{this.value}}">
					</div>
					<div class="col-sm-2">
						{{#ifEqual 'owner' ../permission}}
						<div class="env-options">
							<button>
								<img class="edit" src="/assets/edit.png" onclick="editVar(this)">
							</button>
							{{!-- &nbsp --}}
							<button>
								<img class="delete" src="/assets/cancel.png" onclick="deleteVar(this)">
							</button>
						</div>
						{{else ifEqual 'editor' ../permission}}
						<div class="env-options">
							<button>
								<img class="edit" src="/assets/edit.png" onclick="editVar(this)">
							</button>
							{{!-- &nbsp --}}
							<button>
								<img class="delete" src="/assets/cancel.png" onclick="deleteVar(this)">
							</button>
						</div>
						{{else}}
						{{/ifEqual}}
					</div>
				</div>
				{{/each}}
			</div>
		</div>
	</div>
	<div id="env-edit-modal">
		<p class="center">Edit config variable</p>
		<hr>
		<br>
		<label>Key</label><br>
		<input type="text" id="edit-key" class="form-control key" placeholder="KEY" aria-label="KEY">
		<div id="key-error-modal">Required</div>
		{{!-- <br> --}}
		<label>Value</label><br>
		<textarea type="text" id="edit-value" class="form-control value" placeholder="VALUE" aria-label="VALUE"></textarea>
		<div class="btn-container">
			<hr>
			<br>
			<div class="row">
				<div class="col-sm-6 btn-holder">
					<button id="close-edit-env-modal" onclick="closeEditEnvModal()">Cancel</button>
				</div>
				<div class="col-sm-6 btn-holder">
					<button id="save-edit-env" onclick="overwriteEnvVar()">
						<div id="edit-add-env" class="center">
							Add
						</div>
						<div id="edit-saving-env" class="center">
							<i class="fas fa-circle-notch fa-spin"></i>
						</div>
					</button>
				</div>
			</div>
		</div>
	</div>
</div>
<div id="side-modal">
	<p class="center">Export file</p>
	<hr>
	<br>
	<label>Choose the file type to export</label>
	<br>
	<select name="fileType-drop-down" id="fileType-drop-down" class="small-font" st>
		<option value="env">.env</option>
		<option value="yaml">.yaml</option>
		<option value="json">.json</option>
	</select>
	<div class="btn-container">
		<hr>
		<br>
		<div class="row">
			<div class="col-sm-6 btn-holder">
				<button id="no-side-modal-btn" onclick="noSideModal()">Cancel</button>
			</div>
			<div class="col-sm-6 btn-holder">
				<button id="yes-side-modal-btn" onclick="yesSideModal()">
					<div id="yes-side-modal-text" class="center">
						Export
					</div>
					<div id="yes-side-modal-load" class="center">
						<i class="fas fa-circle-notch fa-spin"></i>
					</div>
				</button>
			</div>
		</div>
	</div>
</div>
<div class="toast" id="message-toast" role="alert" aria-live="assertive" aria-atomic="true">
	<div class="toast-header">
		<img src="/assets/favicon.svg" style="width: 25px; height: 25px" class="rounded mr-2" alt="...">
		&nbsp;
		&nbsp;
		<strong id="toast-heading" class="mr-auto error-toast">Not Allowed</strong>
		{{!-- <small>11 mins ago</small> --}}
	</div>
	<div id="toast-body" class="toast-body">
		You do not have permission to delete the project
	</div>
</div>
<script>
	const option = {
		animation: true,
		autohide: true,
		delay: 3000
	};

	var toast = document.getElementById('message-toast');
	var toastHeading = document.getElementById('toast-heading');
	var toastBody = document.getElementById('toast-body');
	var bsToast = new bootstrap.Toast(toast, option);

	const addKey = document.getElementById('add-key');
	const addValue = document.getElementById('add-value');
	const keyError = document.getElementById('key-error');
	const keyErrorModal = document.getElementById('key-error-modal');
	const addEnvBtn = document.getElementById('add-env-btn');
	const editKey = document.getElementById('edit-key');
	const editValue = document.getElementById('edit-value');
	const envEditModal = document.getElementById("env-edit-modal");
	const disableBodyModal = document.getElementById("disable-body-modal");
	const websiteEditField = document.getElementById('website-link-field');
	const addEnvText = document.getElementById('add-env');
	const savingEnvLoad = document.getElementById('saving-env');
	const editAddEnvText = document.getElementById('edit-add-env');
	const editSavingEnvLoad = document.getElementById('edit-saving-env');
	const saveEditEnvBtn = document.getElementById('save-edit-env');

	const sideModal = document.getElementById('side-modal');
	const yesSideModalBtn = document.getElementById('yes-side-modal-btn');
	const yesSideModalText = document.getElementById('yes-side-modal-text');
	const yesSideModalLoad = document.getElementById('yes-side-modal-load');
	const noSideModalBtn = document.getElementById('no-side-modal-btn');
	const fileTypeDropDown = document.getElementById("fileType-drop-down");

	let current, oldKey;
	var allKeys = [];

	allKeys = "{{ keys }}".split(',');

	addKey.onfocus = () => {
		addKey.style.border = "1px solid #76767c";
		keyError.style.display = "none"
	}

	addEnvBtn.onclick = async () => {
		const key = addKey.value;
		const value = addValue.value;

		if (key.trim() == "") {
			addKey.style.border = "1px solid #D64242";
			keyError.style.display = "block";
			keyError.innerHTML = "Required"
			return;
		}

		if (allKeys.includes(key)) {
			addKey.style.border = "1px solid #D64242";
			keyError.style.display = "block";
			keyError.innerHTML = "KEY already exists"
			return;
		}

		addEnvText.style.display = "none";
		savingEnvLoad.style.display = "block";
		addEnvBtn.disabled = true;

		var myHeaders = new Headers();
		myHeaders.append("Content-Type", "application/json");
		myHeaders.append("Accept", "application/json");

		var raw = JSON.stringify({
			key,
			value,
			projectId: "{{ projectId }}"
		});

		var requestOptions = {
			method: 'POST',
			credentials: 'include',
			headers: myHeaders,
			body: raw,
			redirect: 'follow'
		};

		const response = await fetch("http://localhost:3000/project/edit/variable", requestOptions);
		const result = await response.json();

		if (result.metadata.success) {
			toastHeading.className = "mr-auto success-toast";
			toastHeading.innerHTML = "Variable Added";
			toastBody.innerHTML = "Variable has been addded successfully";
			bsToast.show();

			allKeys.push(key);
			addEnvText.style.display = "flex";
			savingEnvLoad.style.display = "none";
			addEnvBtn.disabled = false;
			addKey.value = "";
			addValue.value = "";

			$(`
   		<div class="row env-font-div">
   	<div>
   		<hr>
   	</div>
   			<div class="col-sm-5">
   				<input type="text" class="form-control key" placeholder="KEY" aria-label="KEY" disabled value=${key}>
   			</div>
   			<div class="col-sm-5">
   				<input type="text" class="form-control value" placeholder="VALUE" aria-label="VALUE" disabled
   					value=${value}>
   			</div>
   			<div class="col-sm-2">
   				<div class="env-options">
   					<button>
   						<img class="edit" src="/assets/edit.png" onclick="editVar(this)">
   					</button>
   					<button>
   						<img class="delete" src="/assets/cancel.png" onclick="deleteVar(this)">
   					</button>
   				</div>
   			</div>
   		</div>
   	`).insertAfter('div.add-row');

		} else {
			if (result.metadata.status === 403) {
				toastHeading.className = "mr-auto error-toast";
				toastHeading.innerHTML = "Not Allowed";
				toastBody.innerHTML = "You do not have permission to add variables";
				bsToast.show();
			} else {
				toastHeading.className = "mr-auto error-toast";
				toastHeading.innerHTML = "Internal Error";
				toastBody.innerHTML = "An error occurred. Please refresh and try again";
				bsToast.show();
			}
		}
	}

	async function deleteVar(x) {
		var key = x.parentNode.parentNode.parentNode.parentNode.children[1].children[0].value;

		var myHeaders = new Headers();
		myHeaders.append("Content-Type", "application/json");
		myHeaders.append("Accept", "application/json");

		var raw = JSON.stringify({
			key,
			projectId: "{{ projectId }}"
		});

		var requestOptions = {
			method: 'DELETE',
			credentials: 'include',
			headers: myHeaders,
			body: raw,
			redirect: 'follow'
		};

		const response = await fetch("http://localhost:3000/project/edit/variable", requestOptions);
		const result = await response.json();

		if (result.metadata.success) {
			toastHeading.className = "mr-auto success-toast";
			toastHeading.innerHTML = "Variable Deleted";
			toastBody.innerHTML = "Variable has been deleted successfully";
			bsToast.show();

			removeValue(key);
			x.parentNode.parentNode.parentNode.parentNode.parentNode.removeChild(x.parentNode.parentNode.parentNode.parentNode);
		} else {
			if (result.metadata.status === 403) {
				toastHeading.className = "mr-auto error-toast";
				toastHeading.innerHTML = "Not Allowed";
				toastBody.innerHTML = "You do not have permission to delete variable";
				bsToast.show();
			} else {
				toastHeading.className = "mr-auto error-toast";
				toastHeading.innerHTML = "Internal Error";
				toastBody.innerHTML = "An error occurred. Please refresh and try again";
				bsToast.show();
			}
		}
	}

	function editVar(x) {
		var key = x.parentNode.parentNode.parentNode.parentNode.children[1].children[0].value;
		var value = x.parentNode.parentNode.parentNode.parentNode.children[2].children[0].value;

		editKey.value = key;
		editValue.value = value;

		envEditModal.style.width = "25%";
		envEditModal.style.padding = "20px";
		disableBodyModal.style.display = "block"

		current = x;
		oldKey = key;
	}

	function closeEditEnvModal() {
		envEditModal.style.width = "0%";
		envEditModal.style.padding = "0px";
		disableBodyModal.style.display = "none"
	}

	async function overwriteEnvVar() {
		const newKey = editKey.value;
		const newValue = editValue.value;

		removeValue(oldKey);

		if (newKey.trim() == "") {
			editKey.style.border = "1px solid #D64242";
			keyErrorModal.style.opacity = 1;
			keyErrorModal.innerHTML = "Required"
			return;
		}

		if (allKeys.includes(newKey)) {
			editKey.style.border = "1px solid #D64242";
			keyErrorModal.style.opacity = 1;
			keyErrorModal.innerHTML = "KEY already exists"
			return;
		}

		editAddEnvText.style.display = "none";
		editSavingEnvLoad.style.display = "block";
		saveEditEnvBtn.disabled = true;

		var myHeaders = new Headers();
		myHeaders.append("Content-Type", "application/json");
		myHeaders.append("Accept", "application/json");

		var raw = JSON.stringify({
			key: newKey,
			value: newValue,
			projectId: "{{ projectId }}"
		});

		var requestOptions = {
			method: 'POST',
			credentials: 'include',
			headers: myHeaders,
			body: raw,
			redirect: 'follow'
		};

		const response = await fetch("http://localhost:3000/project/edit/variable", requestOptions);
		const result = await response.json();

		if (result.metadata.success) {
			toastHeading.className = "mr-auto success-toast";
			toastHeading.innerHTML = "Variable Edited";
			toastBody.innerHTML = "Variable has been edited successfully";
			bsToast.show();

			allKeys.push(newKey);

			current.parentNode.parentNode.parentNode.parentNode.children[1].children[0].value = newKey;
			current.parentNode.parentNode.parentNode.parentNode.children[2].children[0].value = newValue;
		} else {
			if (result.metadata.status === 403) {
				toastHeading.className = "mr-auto error-toast";
				toastHeading.innerHTML = "Not Allowed";
				toastBody.innerHTML = "You do not have permission to edit variables";
				bsToast.show();
				allKeys.push(oldKey);
			} else {
				toastHeading.className = "mr-auto error-toast";
				toastHeading.innerHTML = "Internal Error";
				toastBody.innerHTML = "An error occurred. Please refresh and try again";
				bsToast.show();
				allKeys.push(oldKey);
			}
		}

		editAddEnvText.style.display = "flex";
		editSavingEnvLoad.style.display = "none";
		saveEditEnvBtn.disabled = false;


		closeEditEnvModal();

		if (oldKey !== newKey) {
			var myHeaders = new Headers();
			myHeaders.append("Content-Type", "application/json");
			myHeaders.append("Accept", "application/json");

			var raw = JSON.stringify({
				key: newKey,
				projectId: "{{ projectId }}"
			});

			var requestOptions = {
				method: 'DELETE',
				credentials: 'include',
				headers: myHeaders,
				body: raw,
				redirect: 'follow'
			};

			const response = await fetch("http://localhost:3000/project/edit/variable", requestOptions);
			const result = await response.json();
		}
	}

	editKey.onfocus = () => {
		editKey.style.border = "1px solid #76767c";
		keyErrorModal.style.opacity = 0;
	}

	function removeValue(value) {
		for (var i = 0; i < allKeys.length; i++) {

			if (allKeys[i] == value) {

				allKeys.splice(i, 1);
			}

		}
	}

	function fnGetFileNameFromContentDispostionHeader(header, type) {
		console.log('header:' + header)
		let contentDispostion = header.split(';');
		const fileNameToken = `filename=`;

		let fileName = `default.${type}`;
		for (let thisValue of contentDispostion) {
			if (thisValue.trim().indexOf(fileNameToken) === 0) {
				fileName = decodeURIComponent(thisValue.trim().replace(fileNameToken, ''));
				break;
			}
		}

		return fileName;
	}

	function exportFile(fileType) {
		const projectId = "{{projectId}}";

		let headers = new Headers();
		headers.append('Content-Type', 'application/json');

		const options = {
			method: 'POST',
			headers: headers,
			body: JSON.stringify({ fileType, projectId }),
		};

		fetch(`/file/download`, options)
			.then(async (res) => ({
				contentType: res.headers.get('Content-type'),
				filename: fnGetFileNameFromContentDispostionHeader(res.headers.get('Content-disposition')),
				blob: await res.blob(),
			}))
			.then((resObj) => {
				// It is necessary to create a new blob object with mime-type explicitly set for all browsers except Chrome, but it works for Chrome too.
				const newBlob = new Blob([resObj.blob], { type: resObj.contentType });

				// MS Edge and IE don't allow using a blob object directly as link href, instead it is necessary to use msSaveOrOpenBlob
				if (window.navigator && window.navigator.msSaveOrOpenBlob) {
					window.navigator.msSaveOrOpenBlob(newBlob);
				} else {
					// For other browsers: create a link pointing to the ObjectURL containing the blob.
					const objUrl = window.URL.createObjectURL(newBlob);

					let link = document.createElement('a');
					link.href = objUrl;
					link.download = resObj.filename;
					link.click();

					// For Firefox it is necessary to delay revoking the ObjectURL.
					setTimeout(() => {
						window.URL.revokeObjectURL(objUrl);
					}, 250);
				}
			})
			.catch((error) => {
				console.log('DOWNLOAD ERROR', error);
			});
	}

	async function yesSideModal() {

		const fileType = fileTypeDropDown.options[fileTypeDropDown.selectedIndex].value;

		exportFile(fileType);

		yesSideModalText.style.display = "none";
		yesSideModalLoad.style.display = "block";
		yesSideModalBtn.disabled = true;

		yesSideModalText.style.display = "flex";
		yesSideModalLoad.style.display = "none";
		yesSideModalBtn.disabled = false;
	}

	function noSideModal() {
		sideModal.style.width = "0%";
		sideModal.style.padding = "0px";
		disableBodyModal.style.display = "none";
	}

	function openExportModal() {
		sideModal.style.width = "25%";
		sideModal.style.padding = "20px";
		disableBodyModal.style.display = "block";
	}
</script>